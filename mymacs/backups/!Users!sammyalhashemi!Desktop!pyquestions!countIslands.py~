"""
Given a rectangular matrix containing only the values “0” and “1”, where the values of “1”
always appear in the form of a rectangular island and the islands are always separated
row-wise and column-wise by at least one line of “0”s, count the number of islands in the given matrix.
Note that the islands can diagonally adjacent.

Input: Matrix of elements with values either 0 or 1
Output: An integer which is the count of all rectangular islands
Example
Input: [[01, 1, 0, 0],
        [1, 0, 0, 0],
        [0, 0, 0, 0],
        [0, 0, 0, 0]]
O(NM + lg(max(N, M))) = O(NM)
Output: 3

Input: [[1, 0, 0, 0],
        [0, 0, 0, 1],
        [0, 1, 0, 1],
        [0, 0, 0, 1]]

Output: 3

totalCountIslands = 2

"""
# {{{1
def BFS(grid, i, j, n, m):
    print(grid)
    if (i >= 0 and j >= 0) and (i <= n - 1 and j <= m - 1):
        queue = [(i, j)]
        # mark as visited
        grid[i][j] = 0
        # {{{2
        while len(queue) > 0:
            i, j = queue.pop(0)
            # we do not consider diagonal land to
            # be part of the same island
            if i - 1 >= 0 and grid[i - 1][j]:
                queue.append((i - 1, j))
                grid[i - 1][j] = 0
            if j - 1 >= 0 and grid[i][j - 1]:
                queue.append((i, j - 1))
                grid[i][j - 1] = 0
            if i + 1 <= n - 1 and grid[i + 1][j]:
                queue.append((i + 1, j))
                grid[i + 1][j] = 0
            if j + 1 <= m - 1 and grid[i][j + 1]:
                queue.append((i, j + 1))
                grid[i][j + 1] = 0


# {{{1
def countIslands(grid):
    count = 0
    if not grid or not grid[0]:
        return count
    n, m = len(grid), len(grid[0])

    for i in range(n):
        for j in range(m):
            if grid[i][j] == 1:
                count += 1
                BFS(grid, i, j, n, m)
    return count


# {{{1
if __name__ == "__main__":
    TESTS = [[[1, 1, 1, 1, 0], [1, 1, 0, 1, 0], [1, 1, 0, 0, 0],
              [0, 0, 0, 0, 0]], [[1, 1, 0, 0, 0], [1, 1, 0, 0, 0],
                                 [0, 0, 1, 0, 0], [0, 0, 0, 1, 1]],
             [
                 [0, 1, 0],
                 [1, 0, 1],
                 [0, 1, 0]
             ]
             ]
    for num, TEST in enumerate(TESTS):
        print(f"TEST {num}")
        res = countIslands(TEST)
        print(f"Result: {res}")
